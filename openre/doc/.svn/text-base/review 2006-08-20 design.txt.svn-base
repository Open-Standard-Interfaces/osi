Design Review 001: 2006-08-20 
=============================

OpenRE API
----------

Notes:

This is not a complete specification review, simply general (rough) guidelines for future design. A full review should be done later (on the
completed design).

Summary:

It seems more and more likely that we'll need to split into multiple libraries. Especially in order to maintain coherence
between seperate physics and rendering engines. Also to reduce complexity, because for technical as well as performance reasons
elements need to be created with dependence with regards to spatial locality and to their static- or dynamic-ness. Also, data structures
(such as those needed for spatial-subdivision) needs to be built up and all this data must be shared between implementations of OpenRE and OpenPE.
To achieve this, the implementations will have to query a lower level engine (OpenGE) for the existance of the data structures that
they require, and then create them where necessary. (Or optionaly work with the structure that IS available) - problem with this is:
Does the rendering engine create data structures first, or does the physics engine? Possible solution is to
let both engines request possible structures giving each a priority. Then OpenGE determines the one with the best
Priority and creates it and returns it to both engines. (perhaps with some other special rules in place).
If neither are available OpenGE returns two different structures. (BUT: HAS TO RETAIN CONSISTENCY
BETWEEN THE TWO IF THEY ARE DYNAMIC OR BOUND). Possibly, it can also calculate memory requirements and return two different
structures for speed puruposes if there's enough memory.

TECHNICAL NOTE: GE can construct some type of locality graph. When the scene is constructed: use OpenRE requests together with OpenGE request
to label nodes and try to find the best structure to hold data.

It also seems as if a "Layer" or "Goup" type will be needed in order to clasify geometry. E.g. To exclude objects from Physics.. or GI etc.
Furthermore: This should not follow the begin ... end architecture because objects in different frames may need to be clasified in the same group.
Groups must also be able to overlap.
e.g.

 group1 = createGroup();
 group2 = createGroup();

 addGroup(group1);
   ... // (geMesh() etc)
 addGroup(group2);
   ... // (geMesh() etc)
 endGroup(group1);
   ... // (geMesh() etc)
 endGroup(group2);

 addGroup(group1);
   ... // (geMesh() etc)
 endGroup(group1);

 reGlobalIllumination(group1);
 peFloorGeometry(group2);

(Or perhaps call it classification instead (e.g. createClasification, addClasification, endClasification)
(Perhaps different types of classification: e.g. object clasification & element clasification)

Ideas are:
  OpenGE: Open Geometry engine - A base for OpenPE, and OpenRE
          geStaticElements3f()
          geDynamicElements3f()
          Bones & skinning: geBoundElements3f (half-dynamic, half static - bound to a skeleton (e.g. can do relative bounding boxes)
         
          Internal functionality (to be used by the engines themselves)
          Build spatial subdivision structures (e.g. AA bounding-box, KD-trees etc)

  OpenPE: Open physics enine
          Cloth, water, Collision, Inverse Kinematics (bones) etc.
          Particle physics
          (independent but connected to OpenRE: I.e. must use ) 

  OpenRE: Open Rendering engine
          Low level rendering:
          Global illumination, Particle effects, hair, grass, furr (see also particle physics),
          Tesselation + displacement maps, shading, ray effects (reflections, refractions),
          texturing etc.
                         

  OpenSL: Open Shading Language - A sublibrary for OpenRE
          converts a standard shading language into multiple formats usable by OpenRE, possibly even generating graphics function calls
          (Renderman)

  OpenPL: Open Procedural Language
    OpenPM: Uses OpenPL to generate procedural materials
    OpenPG: Uses OpenPL for procedural geometry (plants, terrains, rocks)
    (Note: but should OpenPM and OpenPG be able to share data....)
    (AND: Should this be implemented in hardware: what about GI and physics...)
